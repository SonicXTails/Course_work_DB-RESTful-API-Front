-- === core.0001_initial ===
BEGIN;
--
-- Create model Make
--
CREATE TABLE "core_make" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "name" varchar(50) NOT NULL UNIQUE);
--
-- Create model Role
--
CREATE TABLE "core_role" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "name" varchar(50) NOT NULL UNIQUE);
--
-- Create model User
--
CREATE TABLE "core_user" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "password" varchar(128) NOT NULL, "last_login" timestamp with time zone NULL, "is_superuser" boolean NOT NULL, "username" varchar(150) NOT NULL UNIQUE, "first_name" varchar(150) NOT NULL, "last_name" varchar(150) NOT NULL, "email" varchar(254) NOT NULL, "is_staff" boolean NOT NULL, "is_active" boolean NOT NULL, "date_joined" timestamp with time zone NOT NULL);
CREATE TABLE "core_user_groups" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "user_id" bigint NOT NULL, "group_id" integer NOT NULL);
CREATE TABLE "core_user_user_permissions" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "user_id" bigint NOT NULL, "permission_id" integer NOT NULL);
--
-- Create model AuditLog
--
CREATE TABLE "core_auditlog" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "action" varchar(100) NOT NULL, "table_name" varchar(50) NOT NULL, "record_id" integer NULL, "old_data" jsonb NULL, "new_data" jsonb NULL, "action_time" timestamp with time zone NOT NULL, "user_id" bigint NULL);
--
-- Create model Car
--
CREATE TABLE "core_car" ("VIN" varchar(17) NOT NULL PRIMARY KEY, "year" integer NOT NULL, "price" numeric(12, 2) NOT NULL, "status" varchar(20) NOT NULL, "description" text NOT NULL, "created_at" timestamp with time zone NOT NULL, "seller_id" bigint NULL, "make_id" bigint NOT NULL);
--
-- Create model CarImage
--
CREATE TABLE "core_carimage" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "image" varchar(100) NOT NULL, "car_id" varchar(17) NOT NULL);
--
-- Create model Model
--
CREATE TABLE "core_model" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "name" varchar(50) NOT NULL UNIQUE, "make_id" bigint NOT NULL);
--
-- Add field model to car
--
ALTER TABLE "core_car" ADD COLUMN "model_id" bigint NOT NULL CONSTRAINT "core_car_model_id_ab210b11_fk_core_model_id" REFERENCES "core_model"("id") DEFERRABLE INITIALLY DEFERRED; SET CONSTRAINTS "core_car_model_id_ab210b11_fk_core_model_id" IMMEDIATE;
--
-- Create model Order
--
CREATE TABLE "core_order" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "order_date" timestamp with time zone NOT NULL, "status" varchar(20) NOT NULL, "total_amount" numeric(12, 2) NOT NULL, "buyer_id" bigint NULL, "car_id" varchar(17) NOT NULL);
--
-- Create model Transaction
--
CREATE TABLE "core_transaction" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "amount" numeric(12, 2) NOT NULL, "transaction_date" timestamp with time zone NOT NULL, "status" varchar(20) NOT NULL, "order_id" bigint NOT NULL);
--
-- Create model UserRole
--
CREATE TABLE "core_userrole" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "role_id" bigint NOT NULL, "user_id" bigint NOT NULL);
--
-- Create model Review
--
CREATE TABLE "core_review" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "rating" smallint NOT NULL CHECK ("rating" >= 0), "comment" text NULL, "created_at" timestamp with time zone NOT NULL, "author_id" bigint NOT NULL, "target_id" bigint NOT NULL, CONSTRAINT "unique_review_per_user" UNIQUE ("author_id", "target_id"));
CREATE INDEX "core_make_name_07f7e019_like" ON "core_make" ("name" varchar_pattern_ops);
CREATE INDEX "core_role_name_ca4cd9c7_like" ON "core_role" ("name" varchar_pattern_ops);
CREATE INDEX "core_user_username_36e4f7f7_like" ON "core_user" ("username" varchar_pattern_ops);
ALTER TABLE "core_user_groups" ADD CONSTRAINT "core_user_groups_user_id_group_id_c82fcad1_uniq" UNIQUE ("user_id", "group_id");
ALTER TABLE "core_user_groups" ADD CONSTRAINT "core_user_groups_user_id_70b4d9b8_fk_core_user_id" FOREIGN KEY ("user_id") REFERENCES "core_user" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "core_user_groups" ADD CONSTRAINT "core_user_groups_group_id_fe8c697f_fk_auth_group_id" FOREIGN KEY ("group_id") REFERENCES "auth_group" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "core_user_groups_user_id_70b4d9b8" ON "core_user_groups" ("user_id");
CREATE INDEX "core_user_groups_group_id_fe8c697f" ON "core_user_groups" ("group_id");
ALTER TABLE "core_user_user_permissions" ADD CONSTRAINT "core_user_user_permissions_user_id_permission_id_73ea0daa_uniq" UNIQUE ("user_id", "permission_id");
ALTER TABLE "core_user_user_permissions" ADD CONSTRAINT "core_user_user_permissions_user_id_085123d3_fk_core_user_id" FOREIGN KEY ("user_id") REFERENCES "core_user" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "core_user_user_permissions" ADD CONSTRAINT "core_user_user_permi_permission_id_35ccf601_fk_auth_perm" FOREIGN KEY ("permission_id") REFERENCES "auth_permission" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "core_user_user_permissions_user_id_085123d3" ON "core_user_user_permissions" ("user_id");
CREATE INDEX "core_user_user_permissions_permission_id_35ccf601" ON "core_user_user_permissions" ("permission_id");
ALTER TABLE "core_auditlog" ADD CONSTRAINT "core_auditlog_user_id_3797aaab_fk_core_user_id" FOREIGN KEY ("user_id") REFERENCES "core_user" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "core_auditlog_user_id_3797aaab" ON "core_auditlog" ("user_id");
ALTER TABLE "core_car" ADD CONSTRAINT "core_car_seller_id_f28e3cc5_fk_core_user_id" FOREIGN KEY ("seller_id") REFERENCES "core_user" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "core_car" ADD CONSTRAINT "core_car_make_id_dad62edd_fk_core_make_id" FOREIGN KEY ("make_id") REFERENCES "core_make" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "core_car_VIN_59031950_like" ON "core_car" ("VIN" varchar_pattern_ops);
CREATE INDEX "core_car_seller_id_f28e3cc5" ON "core_car" ("seller_id");
CREATE INDEX "core_car_make_id_dad62edd" ON "core_car" ("make_id");
ALTER TABLE "core_carimage" ADD CONSTRAINT "core_carimage_car_id_980997b9_fk_core_car_VIN" FOREIGN KEY ("car_id") REFERENCES "core_car" ("VIN") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "core_carimage_car_id_980997b9" ON "core_carimage" ("car_id");
CREATE INDEX "core_carimage_car_id_980997b9_like" ON "core_carimage" ("car_id" varchar_pattern_ops);
ALTER TABLE "core_model" ADD CONSTRAINT "core_model_make_id_dafc45de_fk_core_make_id" FOREIGN KEY ("make_id") REFERENCES "core_make" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "core_model_name_f7c87d81_like" ON "core_model" ("name" varchar_pattern_ops);
CREATE INDEX "core_model_make_id_dafc45de" ON "core_model" ("make_id");
CREATE INDEX "core_car_model_id_ab210b11" ON "core_car" ("model_id");
ALTER TABLE "core_order" ADD CONSTRAINT "core_order_buyer_id_75e0ab1b_fk_core_user_id" FOREIGN KEY ("buyer_id") REFERENCES "core_user" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "core_order" ADD CONSTRAINT "core_order_car_id_5e0a257c_fk_core_car_VIN" FOREIGN KEY ("car_id") REFERENCES "core_car" ("VIN") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "core_order_buyer_id_75e0ab1b" ON "core_order" ("buyer_id");
CREATE INDEX "core_order_car_id_5e0a257c" ON "core_order" ("car_id");
CREATE INDEX "core_order_car_id_5e0a257c_like" ON "core_order" ("car_id" varchar_pattern_ops);
ALTER TABLE "core_transaction" ADD CONSTRAINT "core_transaction_order_id_e41a6bc5_fk_core_order_id" FOREIGN KEY ("order_id") REFERENCES "core_order" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "core_transaction_order_id_e41a6bc5" ON "core_transaction" ("order_id");
ALTER TABLE "core_userrole" ADD CONSTRAINT "core_userrole_role_id_8272b20d_fk_core_role_id" FOREIGN KEY ("role_id") REFERENCES "core_role" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "core_userrole" ADD CONSTRAINT "core_userrole_user_id_aca63c51_fk_core_user_id" FOREIGN KEY ("user_id") REFERENCES "core_user" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "core_userrole_role_id_8272b20d" ON "core_userrole" ("role_id");
CREATE INDEX "core_userrole_user_id_aca63c51" ON "core_userrole" ("user_id");
ALTER TABLE "core_review" ADD CONSTRAINT "core_review_author_id_b9ff1c35_fk_core_user_id" FOREIGN KEY ("author_id") REFERENCES "core_user" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "core_review" ADD CONSTRAINT "core_review_target_id_f0d3fb81_fk_core_user_id" FOREIGN KEY ("target_id") REFERENCES "core_user" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "core_review_author_id_b9ff1c35" ON "core_review" ("author_id");
CREATE INDEX "core_review_target_id_f0d3fb81" ON "core_review" ("target_id");
COMMIT;

-- === core.0002_alter_auditlog_options_alter_auditlog_action_time_and_more ===
BEGIN;
--
-- Change Meta options on auditlog
--
-- (no-op)
--
-- Alter field action_time on auditlog
--
CREATE INDEX "core_auditlog_action_time_f504adae" ON "core_auditlog" ("action_time");
--
-- Create index core_auditl_action__d5c966_idx on field(s) -action_time of model auditlog
--
CREATE INDEX "core_auditl_action__d5c966_idx" ON "core_auditlog" ("action_time" DESC);
--
-- Create index core_auditl_table_n_4a8950_idx on field(s) table_name of model auditlog
--
CREATE INDEX "core_auditl_table_n_4a8950_idx" ON "core_auditlog" ("table_name");
--
-- Create index core_auditl_action_d9fb24_idx on field(s) action of model auditlog
--
CREATE INDEX "core_auditl_action_d9fb24_idx" ON "core_auditlog" ("action");
COMMIT;

-- === core.0003_auditlog_actor_label ===
BEGIN;
--
-- Add field actor_label to auditlog
--
ALTER TABLE "core_auditlog" ADD COLUMN "actor_label" varchar(150) NULL;
COMMIT;

-- === core.0004_alter_model_name_model_uniq_model_per_make ===
BEGIN;
--
-- Alter field name on model
--
DROP INDEX IF EXISTS "core_model_name_f7c87d81_like";
--
-- Create constraint uniq_model_per_make on model model
--
ALTER TABLE "core_model" ADD CONSTRAINT "uniq_model_per_make" UNIQUE ("make_id", "name");
COMMIT;

-- === core.0005_alter_auditlog_record_id ===
BEGIN;
--
-- Alter field record_id on auditlog
--
ALTER TABLE "core_auditlog" ALTER COLUMN "record_id" TYPE varchar(255) USING "record_id"::varchar(255);
CREATE INDEX "core_auditlog_record_id_56d91507" ON "core_auditlog" ("record_id");
CREATE INDEX "core_auditlog_record_id_56d91507_like" ON "core_auditlog" ("record_id" varchar_pattern_ops);
COMMIT;

-- === core.0006_userprofile ===
BEGIN;
--
-- Create model UserProfile
--
CREATE TABLE "core_userprofile" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "phone_masked" varchar(32) NOT NULL, "user_id" bigint NOT NULL UNIQUE);
ALTER TABLE "core_userprofile" ADD CONSTRAINT "core_userprofile_user_id_5141ad90_fk_core_user_id" FOREIGN KEY ("user_id") REFERENCES "core_user" ("id") DEFERRABLE INITIALLY DEFERRED;
COMMIT;

-- === core.0007_constraints ===
BEGIN;
--
-- Create constraint car_price_gt_zero on model car
--
ALTER TABLE "core_car" ADD CONSTRAINT "car_price_gt_zero" CHECK ("price" > 0);
--
-- Create constraint car_year_range on model car
--
ALTER TABLE "core_car" ADD CONSTRAINT "car_year_range" CHECK (("year" >= 1980 AND "year" <= 2100));
--
-- Create constraint uniq_car_vin on model car
--
ALTER TABLE "core_car" ADD CONSTRAINT "uniq_car_vin" UNIQUE ("VIN");
COMMIT;

-- === core.0008_views ===
BEGIN;
--
-- Raw SQL operation
--

CREATE OR REPLACE VIEW vw_active_listings AS
SELECT c."VIN" AS vin, m.name AS make, md.name AS model, c.price, c.year, c.status, c.created_at
FROM core_car c
JOIN core_make  m  ON m.id  = c.make_id
JOIN core_model md ON md.id = c.model_id
WHERE c.status = 'available';

CREATE OR REPLACE VIEW vw_sales_by_make_month AS
SELECT m.name AS make,
       date_trunc('month', t.transaction_date) AS month,
       COUNT(*) AS deals,
       SUM(t.amount) AS revenue
FROM core_transaction t
JOIN core_order o ON o.id = t.order_id
JOIN core_car   c ON c."VIN" = o.car_id
JOIN core_make  m ON m.id = c.make_id
WHERE t.status = 'completed'
GROUP BY m.name, date_trunc('month', t.transaction_date);

CREATE OR REPLACE VIEW vw_user_activity AS
SELECT u.id AS user_id, u.username,
       COUNT(DISTINCT o.id) AS orders_cnt,
       COUNT(DISTINCT t.id) AS tx_cnt
FROM core_user u
LEFT JOIN core_order       o ON o.buyer_id = u.id
LEFT JOIN core_transaction t ON t.order_id = o.id
GROUP BY u.id, u.username;

COMMIT;

-- === core.0009_procs_triggers ===
BEGIN;
--
-- Raw SQL operation
--

-- ######### ПРОЦЕДУРЫ #########
CREATE OR REPLACE FUNCTION sp_reserve_car(p_user_id INT, p_car_vin VARCHAR)
RETURNS INT AS $$
DECLARE v_order_id INT; v_price NUMERIC;
BEGIN
  PERFORM 1 FROM core_car WHERE "VIN"=p_car_vin AND status='available' FOR UPDATE;
  IF NOT FOUND THEN RAISE EXCEPTION 'CAR_NOT_AVAILABLE' USING HINT='Авто недоступно'; END IF;

  SELECT price INTO v_price FROM core_car WHERE "VIN"=p_car_vin;
  INSERT INTO core_order(buyer_id, car_id, status, order_date, total_amount)
  VALUES(p_user_id, p_car_vin, 'pending', now(), v_price)
  RETURNING id INTO v_order_id;

  UPDATE core_car SET status='reserved' WHERE "VIN"=p_car_vin;
  RETURN v_order_id;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION sp_complete_sale(p_order_id INT)
RETURNS INT AS $$
DECLARE v_tx_id INT; v_car_vin VARCHAR; v_amount NUMERIC;
BEGIN
  SELECT car_id, total_amount INTO v_car_vin, v_amount FROM core_order WHERE id=p_order_id FOR UPDATE;
  IF NOT FOUND THEN RAISE EXCEPTION 'ORDER_NOT_FOUND'; END IF;

  PERFORM 1 FROM core_order WHERE id=p_order_id AND status='pending';
  IF NOT FOUND THEN RAISE EXCEPTION 'ORDER_INVALID_STATE' USING HINT='Продажа возможна только из pending'; END IF;

  INSERT INTO core_transaction(order_id, amount, transaction_date, status)
  VALUES(p_order_id, v_amount, now(), 'completed')
  RETURNING id INTO v_tx_id;

  UPDATE core_order SET status='paid' WHERE id=p_order_id;
  UPDATE core_car   SET status='sold' WHERE "VIN"=v_car_vin;

  RETURN v_tx_id;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE sp_bulk_reprice(p_make_id INT, p_percent NUMERIC)
LANGUAGE plpgsql AS $$
BEGIN
  UPDATE core_car
  SET price = ROUND(price * (1 + p_percent/100.0), 2)
  WHERE make_id = p_make_id AND status IN ('available','reserved');
END;
$$;

-- ######### ВАЛИДАЦИЯ ТРАНЗАКЦИЙ #########
CREATE OR REPLACE FUNCTION trg_validate_tx() RETURNS trigger AS $$
DECLARE v_order_status TEXT;
BEGIN
  SELECT status INTO v_order_status FROM core_order WHERE id = NEW.order_id;
  IF v_order_status <> 'pending' THEN
    RAISE EXCEPTION 'ORDER_INVALID_STATE' USING HINT='Транзакцию можно создать только из pending';
  END IF;
  RETURN NEW;
END; $$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS validate_tx ON core_transaction;
CREATE TRIGGER validate_tx BEFORE INSERT ON core_transaction
FOR EACH ROW EXECUTE FUNCTION trg_validate_tx();

-- ######### АУДИТ DB-УРОВНЯ #########
-- HSTORE не нужен, так как используем JSONB, но не помешает:
CREATE EXTENSION IF NOT EXISTS hstore;

CREATE OR REPLACE FUNCTION audit_row() RETURNS trigger AS $$
DECLARE rec_id text;
BEGIN
  -- Универсально вынимаем PK: сначала id, если нет — VIN (для core_car)
  rec_id := COALESCE(
              (to_jsonb(NEW)->>'id'),
              (to_jsonb(OLD)->>'id'),
              (to_jsonb(NEW)->>'VIN'),
              (to_jsonb(OLD)->>'VIN')
           );

  INSERT INTO core_auditlog(user_id, action, table_name, record_id, old_data, new_data, action_time)
  VALUES (NULL, TG_OP, TG_TABLE_NAME, rec_id, to_jsonb(OLD), to_jsonb(NEW), now());
  RETURN COALESCE(NEW, OLD);
END; $$ LANGUAGE plpgsql;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname='audit_cars') THEN
    CREATE TRIGGER audit_cars  AFTER INSERT OR UPDATE OR DELETE ON core_car  FOR EACH ROW EXECUTE FUNCTION audit_row();
    CREATE TRIGGER audit_orders AFTER INSERT OR UPDATE OR DELETE ON core_order FOR EACH ROW EXECUTE FUNCTION audit_row();
    CREATE TRIGGER audit_tx     AFTER INSERT OR UPDATE OR DELETE ON core_transaction FOR EACH ROW EXECUTE FUNCTION audit_row();
  END IF;
END $$;

COMMIT;

-- === core.0010_remove_car_car_price_gt_zero_and_more ===
BEGIN;
--
-- Remove constraint car_price_gt_zero from model car
--
ALTER TABLE "core_car" DROP CONSTRAINT "car_price_gt_zero";
--
-- Remove constraint car_year_range from model car
--
ALTER TABLE "core_car" DROP CONSTRAINT "car_year_range";
--
-- Remove constraint uniq_car_vin from model car
--
ALTER TABLE "core_car" DROP CONSTRAINT "uniq_car_vin";
COMMIT;

